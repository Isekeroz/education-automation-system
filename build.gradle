plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "$springBootPluginVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagementPluginVersion"
    id 'com.palantir.docker' version "${springDockerPluginVersion}"
}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'commons-logging', module: 'commons-logging'
    }
}

group = projectGroup
version = projectVersion

java {
    sourceCompatibility = javaVersion
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // Common
    implementation(
            [
                    'org.slf4j:slf4j-api',
                    'com.fasterxml.jackson.datatype:jackson-datatype-jsr310',
                    'org.apache.commons:commons-lang3',
                    'org.apache.commons:commons-collections4',
                    'com.fasterxml.jackson.core:jackson-annotations',
            ]
    )

    compileOnly(
            ['org.projectlombok:lombok']
    )

    annotationProcessor(
            [
                    'org.projectlombok:lombok',
            ]
    )
    // Common

    // Web
    implementation(
            [
                    'org.springframework.boot:spring-boot-starter-log4j2',
                    'com.github.ben-manes.caffeine:caffeine',
                    'org.springframework.boot:spring-boot-starter-cache',
                    'org.springframework.boot:spring-boot-starter-actuator',
                    "org.springdoc:springdoc-openapi-starter-webmvc-ui:${swaggerVersion}",
                    'org.springframework.boot:spring-boot-starter-validation',
                    'org.springframework.boot:spring-boot-starter-web',
            ]
    )

    annotationProcessor(
            [
                    'org.springframework.boot:spring-boot-configuration-processor',
            ]
    )
    // Web

    // Data Access
    runtimeOnly(
            [
                    'com.h2database:h2'
            ]
    )

    implementation(
            [
                    'jakarta.validation:jakarta.validation-api',
                    "org.mapstruct:mapstruct:${mapStructVersion}",
                    'jakarta.persistence:jakarta.persistence-api',
                    'org.hibernate.orm:hibernate-core',
                    "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta",
                    "com.querydsl:querydsl-apt:${querydslVersion}:jakarta",
                    'org.springframework.boot:spring-boot-starter-data-jpa',
            ]
    )

    annotationProcessor(
            [
                    "org.mapstruct:mapstruct-processor:${mapStructVersion}",
                    "org.projectlombok:lombok-mapstruct-binding:${mapStructLombokVersion}",
                    "com.querydsl:querydsl-apt:${querydslVersion}:jakarta",
                    'jakarta.persistence:jakarta.persistence-api',
                    'jakarta.annotation:jakarta.annotation-api',
            ]
    )
    // Data Access

    // Test
    testImplementation(
            [
                    'org.junit.jupiter:junit-jupiter-api',
                    'org.junit.platform:junit-platform-suite-engine',
                    'org.springframework.boot:spring-boot-starter-test'
            ]
    )

    testRuntimeOnly(
            [
                    'org.junit.jupiter:junit-jupiter-engine'
            ]
    )
    // Test
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardError"
    }
    useJUnitPlatform()
    include '**/EducationTestSuite.class'
}

springBoot {
    buildInfo()
}

processResources {
    duplicatesStrategy = 'include'
    with copySpec {
        from 'src/main/resources'
        include '**/application.yml'
        project.properties.findAll().each { prop ->
            if (prop.key != null) {
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [(prop.key): prop.value.toString()])
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [('project.' + prop.key): prop.value.toString()])
            }
        }
    }
}

docker {
    name project.group + '/' + project.name + ':' + project.version
    files bootJar.archiveFile
    buildArgs(['JAR_FILE': "${bootJar.archiveFileName.get()}"])
    pull true
    noCache true
}
